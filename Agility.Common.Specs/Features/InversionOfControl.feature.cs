// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Agility.Common.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Inversion Of Control")]
    public partial class InversionOfControlFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InversionOfControl.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Inversion Of Control", "In order to manage dynamic components and dependencies\r\nAs an application\r\nI want" +
                    " to be able to register and resolve components", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("Provider has no registered components");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register an unexisting component as transient")]
        public virtual void RegisterAnUnexistingComponentAsTransient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register an unexisting component as transient", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
testRunner.Given("Component Agility.Common.Specs.IComponent is not registered");
#line 11
testRunner.When("I try to register component Agility.Common.Specs.IComponent as a transient");
#line 12
testRunner.Then("Component Agility.Common.Specs.IComponent is registered");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register an unexisting component as singleton")]
        public virtual void RegisterAnUnexistingComponentAsSingleton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register an unexisting component as singleton", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("Component Agility.Common.Specs.IComponent is not registered");
#line 16
testRunner.When("I try to register component Agility.Common.Specs.IComponent as a singleton");
#line 17
testRunner.Then("Component Agility.Common.Specs.IComponent is registered");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register an existing transient component as transient")]
        public virtual void RegisterAnExistingTransientComponentAsTransient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register an existing transient component as transient", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
testRunner.Given("Component Agility.Common.Specs.IComponent is registered as a transient");
#line 21
testRunner.When("I try to register component Agility.Common.Specs.IComponent as a transient");
#line 22
testRunner.Then("The system shows the error message \"There is already a component registered for A" +
                    "gility.Common.Specs.IComponent\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register an existing singleton component as singleton")]
        public virtual void RegisterAnExistingSingletonComponentAsSingleton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register an existing singleton component as singleton", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
testRunner.Given("Component Agility.Common.Specs.IComponent is registered as a singleton");
#line 26
testRunner.When("I try to register component Agility.Common.Specs.IComponent as a singleton");
#line 27
testRunner.Then("The system shows the error message \"There is already a component registered for A" +
                    "gility.Common.Specs.IComponent\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register an existing singleon component as transient")]
        public virtual void RegisterAnExistingSingleonComponentAsTransient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register an existing singleon component as transient", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
testRunner.Given("Component Agility.Common.Specs.IComponent is registered as a singleton");
#line 31
testRunner.When("I try to register component Agility.Common.Specs.IComponent as a transient");
#line 32
testRunner.Then("The system shows the error message \"There is already a component registered for A" +
                    "gility.Common.Specs.IComponent\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register an existing transient component as singleton")]
        public virtual void RegisterAnExistingTransientComponentAsSingleton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register an existing transient component as singleton", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
testRunner.Given("Component Agility.Common.Specs.IComponent is registered as a transient");
#line 36
testRunner.When("I try to register component Agility.Common.Specs.IComponent as a singleton");
#line 37
testRunner.Then("The system shows the error message \"There is already a component registered for A" +
                    "gility.Common.Specs.IComponent\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve an unexisting component")]
        public virtual void ResolveAnUnexistingComponent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve an unexisting component", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
testRunner.Given("Component Agility.Common.Specs.IComponent is not registered");
#line 41
testRunner.When("I try to resolve component Agility.Common.Specs.IComponent");
#line 42
testRunner.Then("The system shows the error message \"There is no component registered for Agility." +
                    "Common.Specs.IComponent\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve an existing transient component")]
        public virtual void ResolveAnExistingTransientComponent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve an existing transient component", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.Given("Component Agility.Common.Specs.IComponent is registered as a transient");
#line 46
testRunner.When("I try to resolve component Agility.Common.Specs.IComponent");
#line 47
testRunner.Then("An instance of component Agility.Common.Specs.IComponent is returned");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve an existing singleton component")]
        public virtual void ResolveAnExistingSingletonComponent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve an existing singleton component", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
testRunner.Given("Component Agility.Common.Specs.IComponent is registered as a singleton");
#line 51
testRunner.When("I try to resolve component Agility.Common.Specs.IComponent");
#line 52
testRunner.Then("An instance of component Agility.Common.Specs.IComponent is returned");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transient components always return new instances")]
        public virtual void TransientComponentsAlwaysReturnNewInstances()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transient components always return new instances", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
testRunner.Given("Component Agility.Common.Specs.IComponent is registered as a transient");
#line 56
testRunner.When("I try to resolve component Agility.Common.Specs.IComponent multiple times");
#line 57
testRunner.Then("A new instance of component Agility.Common.Specs.IComponent is returned each time" +
                    "");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Singleton components always return the same instance")]
        public virtual void SingletonComponentsAlwaysReturnTheSameInstance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Singleton components always return the same instance", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
testRunner.Given("Component Agility.Common.Specs.IComponent is registered as a singleton");
#line 61
testRunner.When("I try to resolve component Agility.Common.Specs.IComponent multiple times");
#line 62
testRunner.Then("The same instance of component Agility.Common.Specs.IComponent is returned each t" +
                    "ime");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
